/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.floodCtr.generate;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-23")
public class StormThriftService {

  public interface Iface {

    public void addSupervisor(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host) throws org.apache.thrift.TException;

    public void addNimbus(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host) throws org.apache.thrift.TException;

    public void addUi(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSupervisor(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addNimbus(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addUi(String containerName, String dockerIp, String dockerArgs, java.util.Map<String, String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addSupervisor(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      send_addSupervisor(containerName, dockerIp, dockerArgs, host);
      recv_addSupervisor();
    }

    public void send_addSupervisor(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      addSupervisor_args args = new addSupervisor_args();
      args.setContainerName(containerName);
      args.setDockerIp(dockerIp);
      args.setDockerArgs(dockerArgs);
      args.setHost(host);
      sendBase("addSupervisor", args);
    }

    public void recv_addSupervisor() throws org.apache.thrift.TException
    {
      addSupervisor_result result = new addSupervisor_result();
      receiveBase(result, "addSupervisor");
      return;
    }

    public void addNimbus(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      send_addNimbus(containerName, dockerIp, dockerArgs, host);
      recv_addNimbus();
    }

    public void send_addNimbus(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      addNimbus_args args = new addNimbus_args();
      args.setContainerName(containerName);
      args.setDockerIp(dockerIp);
      args.setDockerArgs(dockerArgs);
      args.setHost(host);
      sendBase("addNimbus", args);
    }

    public void recv_addNimbus() throws org.apache.thrift.TException
    {
      addNimbus_result result = new addNimbus_result();
      receiveBase(result, "addNimbus");
      return;
    }

    public void addUi(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      send_addUi(containerName, dockerIp, dockerArgs, host);
      recv_addUi();
    }

    public void send_addUi(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host) throws org.apache.thrift.TException
    {
      addUi_args args = new addUi_args();
      args.setContainerName(containerName);
      args.setDockerIp(dockerIp);
      args.setDockerArgs(dockerArgs);
      args.setHost(host);
      sendBase("addUi", args);
    }

    public void recv_addUi() throws org.apache.thrift.TException
    {
      addUi_result result = new addUi_result();
      receiveBase(result, "addUi");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSupervisor(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSupervisor_call method_call = new addSupervisor_call(containerName, dockerIp, dockerArgs, host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSupervisor_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String containerName;
      private String dockerIp;
      private String dockerArgs;
      private java.util.Map<String,String> host;
      public addSupervisor_call(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.containerName = containerName;
        this.dockerIp = dockerIp;
        this.dockerArgs = dockerArgs;
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSupervisor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSupervisor_args args = new addSupervisor_args();
        args.setContainerName(containerName);
        args.setDockerIp(dockerIp);
        args.setDockerArgs(dockerArgs);
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addNimbus(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNimbus_call method_call = new addNimbus_call(containerName, dockerIp, dockerArgs, host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNimbus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String containerName;
      private String dockerIp;
      private String dockerArgs;
      private java.util.Map<String,String> host;
      public addNimbus_call(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.containerName = containerName;
        this.dockerIp = dockerIp;
        this.dockerArgs = dockerArgs;
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNimbus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNimbus_args args = new addNimbus_args();
        args.setContainerName(containerName);
        args.setDockerIp(dockerIp);
        args.setDockerArgs(dockerArgs);
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addUi(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addUi_call method_call = new addUi_call(containerName, dockerIp, dockerArgs, host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUi_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String containerName;
      private String dockerIp;
      private String dockerArgs;
      private java.util.Map<String,String> host;
      public addUi_call(String containerName, String dockerIp, String dockerArgs, java.util.Map<String,String> host, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.containerName = containerName;
        this.dockerIp = dockerIp;
        this.dockerArgs = dockerArgs;
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUi_args args = new addUi_args();
        args.setContainerName(containerName);
        args.setDockerIp(dockerIp);
        args.setDockerArgs(dockerArgs);
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSupervisor", new addSupervisor());
      processMap.put("addNimbus", new addNimbus());
      processMap.put("addUi", new addUi());
      return processMap;
    }

    public static class addSupervisor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSupervisor_args> {
      public addSupervisor() {
        super("addSupervisor");
      }

      public addSupervisor_args getEmptyArgsInstance() {
        return new addSupervisor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSupervisor_result getResult(I iface, addSupervisor_args args) throws org.apache.thrift.TException {
        addSupervisor_result result = new addSupervisor_result();
        iface.addSupervisor(args.containerName, args.dockerIp, args.dockerArgs, args.host);
        return result;
      }
    }

    public static class addNimbus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNimbus_args> {
      public addNimbus() {
        super("addNimbus");
      }

      public addNimbus_args getEmptyArgsInstance() {
        return new addNimbus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addNimbus_result getResult(I iface, addNimbus_args args) throws org.apache.thrift.TException {
        addNimbus_result result = new addNimbus_result();
        iface.addNimbus(args.containerName, args.dockerIp, args.dockerArgs, args.host);
        return result;
      }
    }

    public static class addUi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUi_args> {
      public addUi() {
        super("addUi");
      }

      public addUi_args getEmptyArgsInstance() {
        return new addUi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUi_result getResult(I iface, addUi_args args) throws org.apache.thrift.TException {
        addUi_result result = new addUi_result();
        iface.addUi(args.containerName, args.dockerIp, args.dockerArgs, args.host);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSupervisor", new addSupervisor());
      processMap.put("addNimbus", new addNimbus());
      processMap.put("addUi", new addUi());
      return processMap;
    }

    public static class addSupervisor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSupervisor_args, Void> {
      public addSupervisor() {
        super("addSupervisor");
      }

      public addSupervisor_args getEmptyArgsInstance() {
        return new addSupervisor_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSupervisor_result result = new addSupervisor_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSupervisor_result result = new addSupervisor_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSupervisor_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addSupervisor(args.containerName, args.dockerIp, args.dockerArgs, args.host,resultHandler);
      }
    }

    public static class addNimbus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNimbus_args, Void> {
      public addNimbus() {
        super("addNimbus");
      }

      public addNimbus_args getEmptyArgsInstance() {
        return new addNimbus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addNimbus_result result = new addNimbus_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addNimbus_result result = new addNimbus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNimbus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addNimbus(args.containerName, args.dockerIp, args.dockerArgs, args.host,resultHandler);
      }
    }

    public static class addUi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUi_args, Void> {
      public addUi() {
        super("addUi");
      }

      public addUi_args getEmptyArgsInstance() {
        return new addUi_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addUi_result result = new addUi_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addUi_result result = new addUi_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUi_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addUi(args.containerName, args.dockerIp, args.dockerArgs, args.host,resultHandler);
      }
    }

  }

  public static class addSupervisor_args implements org.apache.thrift.TBase<addSupervisor_args, addSupervisor_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSupervisor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSupervisor_args");

    private static final org.apache.thrift.protocol.TField CONTAINER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("containerName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOCKER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerIp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOCKER_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerArgs", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSupervisor_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSupervisor_argsTupleSchemeFactory();

    public String containerName; // required
    public String dockerIp; // required
    public String dockerArgs; // required
    public java.util.Map<String,String> host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTAINER_NAME((short)1, "containerName"),
      DOCKER_IP((short)2, "dockerIp"),
      DOCKER_ARGS((short)3, "dockerArgs"),
      HOST((short)4, "host");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTAINER_NAME
            return CONTAINER_NAME;
          case 2: // DOCKER_IP
            return DOCKER_IP;
          case 3: // DOCKER_ARGS
            return DOCKER_ARGS;
          case 4: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTAINER_NAME, new org.apache.thrift.meta_data.FieldMetaData("containerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_IP, new org.apache.thrift.meta_data.FieldMetaData("dockerIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_ARGS, new org.apache.thrift.meta_data.FieldMetaData("dockerArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSupervisor_args.class, metaDataMap);
    }

    public addSupervisor_args() {
    }

    public addSupervisor_args(
      String containerName,
      String dockerIp,
      String dockerArgs,
      java.util.Map<String,String> host)
    {
      this();
      this.containerName = containerName;
      this.dockerIp = dockerIp;
      this.dockerArgs = dockerArgs;
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSupervisor_args(addSupervisor_args other) {
      if (other.isSetContainerName()) {
        this.containerName = other.containerName;
      }
      if (other.isSetDockerIp()) {
        this.dockerIp = other.dockerIp;
      }
      if (other.isSetDockerArgs()) {
        this.dockerArgs = other.dockerArgs;
      }
      if (other.isSetHost()) {
        java.util.Map<String,String> __this__host = new java.util.HashMap<String,String>(other.host);
        this.host = __this__host;
      }
    }

    public addSupervisor_args deepCopy() {
      return new addSupervisor_args(this);
    }

    @Override
    public void clear() {
      this.containerName = null;
      this.dockerIp = null;
      this.dockerArgs = null;
      this.host = null;
    }

    public String getContainerName() {
      return this.containerName;
    }

    public addSupervisor_args setContainerName(String containerName) {
      this.containerName = containerName;
      return this;
    }

    public void unsetContainerName() {
      this.containerName = null;
    }

    /** Returns true if field containerName is set (has been assigned a value) and false otherwise */
    public boolean isSetContainerName() {
      return this.containerName != null;
    }

    public void setContainerNameIsSet(boolean value) {
      if (!value) {
        this.containerName = null;
      }
    }

    public String getDockerIp() {
      return this.dockerIp;
    }

    public addSupervisor_args setDockerIp(String dockerIp) {
      this.dockerIp = dockerIp;
      return this;
    }

    public void unsetDockerIp() {
      this.dockerIp = null;
    }

    /** Returns true if field dockerIp is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerIp() {
      return this.dockerIp != null;
    }

    public void setDockerIpIsSet(boolean value) {
      if (!value) {
        this.dockerIp = null;
      }
    }

    public String getDockerArgs() {
      return this.dockerArgs;
    }

    public addSupervisor_args setDockerArgs(String dockerArgs) {
      this.dockerArgs = dockerArgs;
      return this;
    }

    public void unsetDockerArgs() {
      this.dockerArgs = null;
    }

    /** Returns true if field dockerArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerArgs() {
      return this.dockerArgs != null;
    }

    public void setDockerArgsIsSet(boolean value) {
      if (!value) {
        this.dockerArgs = null;
      }
    }

    public int getHostSize() {
      return (this.host == null) ? 0 : this.host.size();
    }

    public void putToHost(String key, String val) {
      if (this.host == null) {
        this.host = new java.util.HashMap<String,String>();
      }
      this.host.put(key, val);
    }

    public java.util.Map<String,String> getHost() {
      return this.host;
    }

    public addSupervisor_args setHost(java.util.Map<String,String> host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTAINER_NAME:
        if (value == null) {
          unsetContainerName();
        } else {
          setContainerName((String)value);
        }
        break;

      case DOCKER_IP:
        if (value == null) {
          unsetDockerIp();
        } else {
          setDockerIp((String)value);
        }
        break;

      case DOCKER_ARGS:
        if (value == null) {
          unsetDockerArgs();
        } else {
          setDockerArgs((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.util.Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTAINER_NAME:
        return getContainerName();

      case DOCKER_IP:
        return getDockerIp();

      case DOCKER_ARGS:
        return getDockerArgs();

      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTAINER_NAME:
        return isSetContainerName();
      case DOCKER_IP:
        return isSetDockerIp();
      case DOCKER_ARGS:
        return isSetDockerArgs();
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSupervisor_args)
        return this.equals((addSupervisor_args)that);
      return false;
    }

    public boolean equals(addSupervisor_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_containerName = true && this.isSetContainerName();
      boolean that_present_containerName = true && that.isSetContainerName();
      if (this_present_containerName || that_present_containerName) {
        if (!(this_present_containerName && that_present_containerName))
          return false;
        if (!this.containerName.equals(that.containerName))
          return false;
      }

      boolean this_present_dockerIp = true && this.isSetDockerIp();
      boolean that_present_dockerIp = true && that.isSetDockerIp();
      if (this_present_dockerIp || that_present_dockerIp) {
        if (!(this_present_dockerIp && that_present_dockerIp))
          return false;
        if (!this.dockerIp.equals(that.dockerIp))
          return false;
      }

      boolean this_present_dockerArgs = true && this.isSetDockerArgs();
      boolean that_present_dockerArgs = true && that.isSetDockerArgs();
      if (this_present_dockerArgs || that_present_dockerArgs) {
        if (!(this_present_dockerArgs && that_present_dockerArgs))
          return false;
        if (!this.dockerArgs.equals(that.dockerArgs))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetContainerName()) ? 131071 : 524287);
      if (isSetContainerName())
        hashCode = hashCode * 8191 + containerName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerIp()) ? 131071 : 524287);
      if (isSetDockerIp())
        hashCode = hashCode * 8191 + dockerIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerArgs()) ? 131071 : 524287);
      if (isSetDockerArgs())
        hashCode = hashCode * 8191 + dockerArgs.hashCode();

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSupervisor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContainerName()).compareTo(other.isSetContainerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContainerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerName, other.containerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerIp()).compareTo(other.isSetDockerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerIp, other.dockerIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerArgs()).compareTo(other.isSetDockerArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerArgs, other.dockerArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSupervisor_args(");
      boolean first = true;

      sb.append("containerName:");
      if (this.containerName == null) {
        sb.append("null");
      } else {
        sb.append(this.containerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerIp:");
      if (this.dockerIp == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerArgs:");
      if (this.dockerArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSupervisor_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSupervisor_argsStandardScheme getScheme() {
        return new addSupervisor_argsStandardScheme();
      }
    }

    private static class addSupervisor_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSupervisor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSupervisor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTAINER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.containerName = iprot.readString();
                struct.setContainerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCKER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerIp = iprot.readString();
                struct.setDockerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCKER_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerArgs = iprot.readString();
                struct.setDockerArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.host = new java.util.HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.host.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSupervisor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.containerName != null) {
          oprot.writeFieldBegin(CONTAINER_NAME_FIELD_DESC);
          oprot.writeString(struct.containerName);
          oprot.writeFieldEnd();
        }
        if (struct.dockerIp != null) {
          oprot.writeFieldBegin(DOCKER_IP_FIELD_DESC);
          oprot.writeString(struct.dockerIp);
          oprot.writeFieldEnd();
        }
        if (struct.dockerArgs != null) {
          oprot.writeFieldBegin(DOCKER_ARGS_FIELD_DESC);
          oprot.writeString(struct.dockerArgs);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.host.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.host.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSupervisor_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSupervisor_argsTupleScheme getScheme() {
        return new addSupervisor_argsTupleScheme();
      }
    }

    private static class addSupervisor_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSupervisor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSupervisor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetContainerName()) {
          optionals.set(0);
        }
        if (struct.isSetDockerIp()) {
          optionals.set(1);
        }
        if (struct.isSetDockerArgs()) {
          optionals.set(2);
        }
        if (struct.isSetHost()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetContainerName()) {
          oprot.writeString(struct.containerName);
        }
        if (struct.isSetDockerIp()) {
          oprot.writeString(struct.dockerIp);
        }
        if (struct.isSetDockerArgs()) {
          oprot.writeString(struct.dockerArgs);
        }
        if (struct.isSetHost()) {
          {
            oprot.writeI32(struct.host.size());
            for (java.util.Map.Entry<String, String> _iter5 : struct.host.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSupervisor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.containerName = iprot.readString();
          struct.setContainerNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dockerIp = iprot.readString();
          struct.setDockerIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dockerArgs = iprot.readString();
          struct.setDockerArgsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.host = new java.util.HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.host.put(_key7, _val8);
            }
          }
          struct.setHostIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSupervisor_result implements org.apache.thrift.TBase<addSupervisor_result, addSupervisor_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSupervisor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSupervisor_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSupervisor_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSupervisor_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSupervisor_result.class, metaDataMap);
    }

    public addSupervisor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSupervisor_result(addSupervisor_result other) {
    }

    public addSupervisor_result deepCopy() {
      return new addSupervisor_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSupervisor_result)
        return this.equals((addSupervisor_result)that);
      return false;
    }

    public boolean equals(addSupervisor_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addSupervisor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSupervisor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSupervisor_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSupervisor_resultStandardScheme getScheme() {
        return new addSupervisor_resultStandardScheme();
      }
    }

    private static class addSupervisor_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSupervisor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSupervisor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSupervisor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSupervisor_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSupervisor_resultTupleScheme getScheme() {
        return new addSupervisor_resultTupleScheme();
      }
    }

    private static class addSupervisor_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSupervisor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSupervisor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSupervisor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNimbus_args implements org.apache.thrift.TBase<addNimbus_args, addNimbus_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNimbus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNimbus_args");

    private static final org.apache.thrift.protocol.TField CONTAINER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("containerName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOCKER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerIp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOCKER_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerArgs", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNimbus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNimbus_argsTupleSchemeFactory();

    public String containerName; // required
    public String dockerIp; // required
    public String dockerArgs; // required
    public java.util.Map<String,String> host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTAINER_NAME((short)1, "containerName"),
      DOCKER_IP((short)2, "dockerIp"),
      DOCKER_ARGS((short)3, "dockerArgs"),
      HOST((short)4, "host");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTAINER_NAME
            return CONTAINER_NAME;
          case 2: // DOCKER_IP
            return DOCKER_IP;
          case 3: // DOCKER_ARGS
            return DOCKER_ARGS;
          case 4: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTAINER_NAME, new org.apache.thrift.meta_data.FieldMetaData("containerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_IP, new org.apache.thrift.meta_data.FieldMetaData("dockerIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_ARGS, new org.apache.thrift.meta_data.FieldMetaData("dockerArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNimbus_args.class, metaDataMap);
    }

    public addNimbus_args() {
    }

    public addNimbus_args(
      String containerName,
      String dockerIp,
      String dockerArgs,
      java.util.Map<String,String> host)
    {
      this();
      this.containerName = containerName;
      this.dockerIp = dockerIp;
      this.dockerArgs = dockerArgs;
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNimbus_args(addNimbus_args other) {
      if (other.isSetContainerName()) {
        this.containerName = other.containerName;
      }
      if (other.isSetDockerIp()) {
        this.dockerIp = other.dockerIp;
      }
      if (other.isSetDockerArgs()) {
        this.dockerArgs = other.dockerArgs;
      }
      if (other.isSetHost()) {
        java.util.Map<String,String> __this__host = new java.util.HashMap<String,String>(other.host);
        this.host = __this__host;
      }
    }

    public addNimbus_args deepCopy() {
      return new addNimbus_args(this);
    }

    @Override
    public void clear() {
      this.containerName = null;
      this.dockerIp = null;
      this.dockerArgs = null;
      this.host = null;
    }

    public String getContainerName() {
      return this.containerName;
    }

    public addNimbus_args setContainerName(String containerName) {
      this.containerName = containerName;
      return this;
    }

    public void unsetContainerName() {
      this.containerName = null;
    }

    /** Returns true if field containerName is set (has been assigned a value) and false otherwise */
    public boolean isSetContainerName() {
      return this.containerName != null;
    }

    public void setContainerNameIsSet(boolean value) {
      if (!value) {
        this.containerName = null;
      }
    }

    public String getDockerIp() {
      return this.dockerIp;
    }

    public addNimbus_args setDockerIp(String dockerIp) {
      this.dockerIp = dockerIp;
      return this;
    }

    public void unsetDockerIp() {
      this.dockerIp = null;
    }

    /** Returns true if field dockerIp is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerIp() {
      return this.dockerIp != null;
    }

    public void setDockerIpIsSet(boolean value) {
      if (!value) {
        this.dockerIp = null;
      }
    }

    public String getDockerArgs() {
      return this.dockerArgs;
    }

    public addNimbus_args setDockerArgs(String dockerArgs) {
      this.dockerArgs = dockerArgs;
      return this;
    }

    public void unsetDockerArgs() {
      this.dockerArgs = null;
    }

    /** Returns true if field dockerArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerArgs() {
      return this.dockerArgs != null;
    }

    public void setDockerArgsIsSet(boolean value) {
      if (!value) {
        this.dockerArgs = null;
      }
    }

    public int getHostSize() {
      return (this.host == null) ? 0 : this.host.size();
    }

    public void putToHost(String key, String val) {
      if (this.host == null) {
        this.host = new java.util.HashMap<String,String>();
      }
      this.host.put(key, val);
    }

    public java.util.Map<String,String> getHost() {
      return this.host;
    }

    public addNimbus_args setHost(java.util.Map<String,String> host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTAINER_NAME:
        if (value == null) {
          unsetContainerName();
        } else {
          setContainerName((String)value);
        }
        break;

      case DOCKER_IP:
        if (value == null) {
          unsetDockerIp();
        } else {
          setDockerIp((String)value);
        }
        break;

      case DOCKER_ARGS:
        if (value == null) {
          unsetDockerArgs();
        } else {
          setDockerArgs((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.util.Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTAINER_NAME:
        return getContainerName();

      case DOCKER_IP:
        return getDockerIp();

      case DOCKER_ARGS:
        return getDockerArgs();

      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTAINER_NAME:
        return isSetContainerName();
      case DOCKER_IP:
        return isSetDockerIp();
      case DOCKER_ARGS:
        return isSetDockerArgs();
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNimbus_args)
        return this.equals((addNimbus_args)that);
      return false;
    }

    public boolean equals(addNimbus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_containerName = true && this.isSetContainerName();
      boolean that_present_containerName = true && that.isSetContainerName();
      if (this_present_containerName || that_present_containerName) {
        if (!(this_present_containerName && that_present_containerName))
          return false;
        if (!this.containerName.equals(that.containerName))
          return false;
      }

      boolean this_present_dockerIp = true && this.isSetDockerIp();
      boolean that_present_dockerIp = true && that.isSetDockerIp();
      if (this_present_dockerIp || that_present_dockerIp) {
        if (!(this_present_dockerIp && that_present_dockerIp))
          return false;
        if (!this.dockerIp.equals(that.dockerIp))
          return false;
      }

      boolean this_present_dockerArgs = true && this.isSetDockerArgs();
      boolean that_present_dockerArgs = true && that.isSetDockerArgs();
      if (this_present_dockerArgs || that_present_dockerArgs) {
        if (!(this_present_dockerArgs && that_present_dockerArgs))
          return false;
        if (!this.dockerArgs.equals(that.dockerArgs))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetContainerName()) ? 131071 : 524287);
      if (isSetContainerName())
        hashCode = hashCode * 8191 + containerName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerIp()) ? 131071 : 524287);
      if (isSetDockerIp())
        hashCode = hashCode * 8191 + dockerIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerArgs()) ? 131071 : 524287);
      if (isSetDockerArgs())
        hashCode = hashCode * 8191 + dockerArgs.hashCode();

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNimbus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContainerName()).compareTo(other.isSetContainerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContainerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerName, other.containerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerIp()).compareTo(other.isSetDockerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerIp, other.dockerIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerArgs()).compareTo(other.isSetDockerArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerArgs, other.dockerArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNimbus_args(");
      boolean first = true;

      sb.append("containerName:");
      if (this.containerName == null) {
        sb.append("null");
      } else {
        sb.append(this.containerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerIp:");
      if (this.dockerIp == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerArgs:");
      if (this.dockerArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNimbus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNimbus_argsStandardScheme getScheme() {
        return new addNimbus_argsStandardScheme();
      }
    }

    private static class addNimbus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNimbus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNimbus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTAINER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.containerName = iprot.readString();
                struct.setContainerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCKER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerIp = iprot.readString();
                struct.setDockerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCKER_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerArgs = iprot.readString();
                struct.setDockerArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.host = new java.util.HashMap<String,String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.host.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNimbus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.containerName != null) {
          oprot.writeFieldBegin(CONTAINER_NAME_FIELD_DESC);
          oprot.writeString(struct.containerName);
          oprot.writeFieldEnd();
        }
        if (struct.dockerIp != null) {
          oprot.writeFieldBegin(DOCKER_IP_FIELD_DESC);
          oprot.writeString(struct.dockerIp);
          oprot.writeFieldEnd();
        }
        if (struct.dockerArgs != null) {
          oprot.writeFieldBegin(DOCKER_ARGS_FIELD_DESC);
          oprot.writeString(struct.dockerArgs);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.host.size()));
            for (java.util.Map.Entry<String, String> _iter14 : struct.host.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNimbus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNimbus_argsTupleScheme getScheme() {
        return new addNimbus_argsTupleScheme();
      }
    }

    private static class addNimbus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNimbus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNimbus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetContainerName()) {
          optionals.set(0);
        }
        if (struct.isSetDockerIp()) {
          optionals.set(1);
        }
        if (struct.isSetDockerArgs()) {
          optionals.set(2);
        }
        if (struct.isSetHost()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetContainerName()) {
          oprot.writeString(struct.containerName);
        }
        if (struct.isSetDockerIp()) {
          oprot.writeString(struct.dockerIp);
        }
        if (struct.isSetDockerArgs()) {
          oprot.writeString(struct.dockerArgs);
        }
        if (struct.isSetHost()) {
          {
            oprot.writeI32(struct.host.size());
            for (java.util.Map.Entry<String, String> _iter15 : struct.host.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNimbus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.containerName = iprot.readString();
          struct.setContainerNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dockerIp = iprot.readString();
          struct.setDockerIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dockerArgs = iprot.readString();
          struct.setDockerArgsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.host = new java.util.HashMap<String,String>(2*_map16.size);
            String _key17;
            String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.host.put(_key17, _val18);
            }
          }
          struct.setHostIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNimbus_result implements org.apache.thrift.TBase<addNimbus_result, addNimbus_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNimbus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNimbus_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNimbus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNimbus_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNimbus_result.class, metaDataMap);
    }

    public addNimbus_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNimbus_result(addNimbus_result other) {
    }

    public addNimbus_result deepCopy() {
      return new addNimbus_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNimbus_result)
        return this.equals((addNimbus_result)that);
      return false;
    }

    public boolean equals(addNimbus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addNimbus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNimbus_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNimbus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNimbus_resultStandardScheme getScheme() {
        return new addNimbus_resultStandardScheme();
      }
    }

    private static class addNimbus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNimbus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNimbus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNimbus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNimbus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNimbus_resultTupleScheme getScheme() {
        return new addNimbus_resultTupleScheme();
      }
    }

    private static class addNimbus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNimbus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNimbus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNimbus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addUi_args implements org.apache.thrift.TBase<addUi_args, addUi_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUi_args");

    private static final org.apache.thrift.protocol.TField CONTAINER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("containerName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOCKER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerIp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOCKER_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerArgs", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUi_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUi_argsTupleSchemeFactory();

    public String containerName; // required
    public String dockerIp; // required
    public String dockerArgs; // required
    public java.util.Map<String,String> host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTAINER_NAME((short)1, "containerName"),
      DOCKER_IP((short)2, "dockerIp"),
      DOCKER_ARGS((short)3, "dockerArgs"),
      HOST((short)4, "host");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTAINER_NAME
            return CONTAINER_NAME;
          case 2: // DOCKER_IP
            return DOCKER_IP;
          case 3: // DOCKER_ARGS
            return DOCKER_ARGS;
          case 4: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTAINER_NAME, new org.apache.thrift.meta_data.FieldMetaData("containerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_IP, new org.apache.thrift.meta_data.FieldMetaData("dockerIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCKER_ARGS, new org.apache.thrift.meta_data.FieldMetaData("dockerArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUi_args.class, metaDataMap);
    }

    public addUi_args() {
    }

    public addUi_args(
      String containerName,
      String dockerIp,
      String dockerArgs,
      java.util.Map<String,String> host)
    {
      this();
      this.containerName = containerName;
      this.dockerIp = dockerIp;
      this.dockerArgs = dockerArgs;
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUi_args(addUi_args other) {
      if (other.isSetContainerName()) {
        this.containerName = other.containerName;
      }
      if (other.isSetDockerIp()) {
        this.dockerIp = other.dockerIp;
      }
      if (other.isSetDockerArgs()) {
        this.dockerArgs = other.dockerArgs;
      }
      if (other.isSetHost()) {
        java.util.Map<String,String> __this__host = new java.util.HashMap<String,String>(other.host);
        this.host = __this__host;
      }
    }

    public addUi_args deepCopy() {
      return new addUi_args(this);
    }

    @Override
    public void clear() {
      this.containerName = null;
      this.dockerIp = null;
      this.dockerArgs = null;
      this.host = null;
    }

    public String getContainerName() {
      return this.containerName;
    }

    public addUi_args setContainerName(String containerName) {
      this.containerName = containerName;
      return this;
    }

    public void unsetContainerName() {
      this.containerName = null;
    }

    /** Returns true if field containerName is set (has been assigned a value) and false otherwise */
    public boolean isSetContainerName() {
      return this.containerName != null;
    }

    public void setContainerNameIsSet(boolean value) {
      if (!value) {
        this.containerName = null;
      }
    }

    public String getDockerIp() {
      return this.dockerIp;
    }

    public addUi_args setDockerIp(String dockerIp) {
      this.dockerIp = dockerIp;
      return this;
    }

    public void unsetDockerIp() {
      this.dockerIp = null;
    }

    /** Returns true if field dockerIp is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerIp() {
      return this.dockerIp != null;
    }

    public void setDockerIpIsSet(boolean value) {
      if (!value) {
        this.dockerIp = null;
      }
    }

    public String getDockerArgs() {
      return this.dockerArgs;
    }

    public addUi_args setDockerArgs(String dockerArgs) {
      this.dockerArgs = dockerArgs;
      return this;
    }

    public void unsetDockerArgs() {
      this.dockerArgs = null;
    }

    /** Returns true if field dockerArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerArgs() {
      return this.dockerArgs != null;
    }

    public void setDockerArgsIsSet(boolean value) {
      if (!value) {
        this.dockerArgs = null;
      }
    }

    public int getHostSize() {
      return (this.host == null) ? 0 : this.host.size();
    }

    public void putToHost(String key, String val) {
      if (this.host == null) {
        this.host = new java.util.HashMap<String,String>();
      }
      this.host.put(key, val);
    }

    public java.util.Map<String,String> getHost() {
      return this.host;
    }

    public addUi_args setHost(java.util.Map<String,String> host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTAINER_NAME:
        if (value == null) {
          unsetContainerName();
        } else {
          setContainerName((String)value);
        }
        break;

      case DOCKER_IP:
        if (value == null) {
          unsetDockerIp();
        } else {
          setDockerIp((String)value);
        }
        break;

      case DOCKER_ARGS:
        if (value == null) {
          unsetDockerArgs();
        } else {
          setDockerArgs((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.util.Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTAINER_NAME:
        return getContainerName();

      case DOCKER_IP:
        return getDockerIp();

      case DOCKER_ARGS:
        return getDockerArgs();

      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTAINER_NAME:
        return isSetContainerName();
      case DOCKER_IP:
        return isSetDockerIp();
      case DOCKER_ARGS:
        return isSetDockerArgs();
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUi_args)
        return this.equals((addUi_args)that);
      return false;
    }

    public boolean equals(addUi_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_containerName = true && this.isSetContainerName();
      boolean that_present_containerName = true && that.isSetContainerName();
      if (this_present_containerName || that_present_containerName) {
        if (!(this_present_containerName && that_present_containerName))
          return false;
        if (!this.containerName.equals(that.containerName))
          return false;
      }

      boolean this_present_dockerIp = true && this.isSetDockerIp();
      boolean that_present_dockerIp = true && that.isSetDockerIp();
      if (this_present_dockerIp || that_present_dockerIp) {
        if (!(this_present_dockerIp && that_present_dockerIp))
          return false;
        if (!this.dockerIp.equals(that.dockerIp))
          return false;
      }

      boolean this_present_dockerArgs = true && this.isSetDockerArgs();
      boolean that_present_dockerArgs = true && that.isSetDockerArgs();
      if (this_present_dockerArgs || that_present_dockerArgs) {
        if (!(this_present_dockerArgs && that_present_dockerArgs))
          return false;
        if (!this.dockerArgs.equals(that.dockerArgs))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetContainerName()) ? 131071 : 524287);
      if (isSetContainerName())
        hashCode = hashCode * 8191 + containerName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerIp()) ? 131071 : 524287);
      if (isSetDockerIp())
        hashCode = hashCode * 8191 + dockerIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetDockerArgs()) ? 131071 : 524287);
      if (isSetDockerArgs())
        hashCode = hashCode * 8191 + dockerArgs.hashCode();

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addUi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContainerName()).compareTo(other.isSetContainerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContainerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerName, other.containerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerIp()).compareTo(other.isSetDockerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerIp, other.dockerIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDockerArgs()).compareTo(other.isSetDockerArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerArgs, other.dockerArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUi_args(");
      boolean first = true;

      sb.append("containerName:");
      if (this.containerName == null) {
        sb.append("null");
      } else {
        sb.append(this.containerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerIp:");
      if (this.dockerIp == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dockerArgs:");
      if (this.dockerArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUi_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUi_argsStandardScheme getScheme() {
        return new addUi_argsStandardScheme();
      }
    }

    private static class addUi_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTAINER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.containerName = iprot.readString();
                struct.setContainerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCKER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerIp = iprot.readString();
                struct.setDockerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCKER_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerArgs = iprot.readString();
                struct.setDockerArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.host = new java.util.HashMap<String,String>(2*_map20.size);
                  String _key21;
                  String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.host.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.containerName != null) {
          oprot.writeFieldBegin(CONTAINER_NAME_FIELD_DESC);
          oprot.writeString(struct.containerName);
          oprot.writeFieldEnd();
        }
        if (struct.dockerIp != null) {
          oprot.writeFieldBegin(DOCKER_IP_FIELD_DESC);
          oprot.writeString(struct.dockerIp);
          oprot.writeFieldEnd();
        }
        if (struct.dockerArgs != null) {
          oprot.writeFieldBegin(DOCKER_ARGS_FIELD_DESC);
          oprot.writeString(struct.dockerArgs);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.host.size()));
            for (java.util.Map.Entry<String, String> _iter24 : struct.host.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUi_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUi_argsTupleScheme getScheme() {
        return new addUi_argsTupleScheme();
      }
    }

    private static class addUi_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetContainerName()) {
          optionals.set(0);
        }
        if (struct.isSetDockerIp()) {
          optionals.set(1);
        }
        if (struct.isSetDockerArgs()) {
          optionals.set(2);
        }
        if (struct.isSetHost()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetContainerName()) {
          oprot.writeString(struct.containerName);
        }
        if (struct.isSetDockerIp()) {
          oprot.writeString(struct.dockerIp);
        }
        if (struct.isSetDockerArgs()) {
          oprot.writeString(struct.dockerArgs);
        }
        if (struct.isSetHost()) {
          {
            oprot.writeI32(struct.host.size());
            for (java.util.Map.Entry<String, String> _iter25 : struct.host.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.containerName = iprot.readString();
          struct.setContainerNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dockerIp = iprot.readString();
          struct.setDockerIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dockerArgs = iprot.readString();
          struct.setDockerArgsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.host = new java.util.HashMap<String,String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.host.put(_key27, _val28);
            }
          }
          struct.setHostIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addUi_result implements org.apache.thrift.TBase<addUi_result, addUi_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUi_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUi_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUi_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUi_result.class, metaDataMap);
    }

    public addUi_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUi_result(addUi_result other) {
    }

    public addUi_result deepCopy() {
      return new addUi_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUi_result)
        return this.equals((addUi_result)that);
      return false;
    }

    public boolean equals(addUi_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addUi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUi_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUi_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUi_resultStandardScheme getScheme() {
        return new addUi_resultStandardScheme();
      }
    }

    private static class addUi_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUi_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUi_resultTupleScheme getScheme() {
        return new addUi_resultTupleScheme();
      }
    }

    private static class addUi_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
